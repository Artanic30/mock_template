# Generated by Django 2.2.1 on 2019-06-17 14:03

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import jsonfield.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('nickname', models.CharField(max_length=50, unique=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Course',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=20, verbose_name='课程代码')),
                ('name', models.CharField(max_length=50, verbose_name='课程名称')),
                ('genre', models.CharField(max_length=50, verbose_name='课程类别')),
                ('credit', models.SmallIntegerField(verbose_name='学分')),
                ('school', models.SmallIntegerField(choices=[(1, '信息科学与技术学院'), (2, '生命科学与技术学院'), (3, '物质科学与技术学院'), (4, '创业与管理学院'), (5, '创意与艺术学院'), (6, '数学科学研究所'), (7, '通识教育中心'), (8, '教学事务处')], verbose_name='开课单位')),
                ('classHour', models.SmallIntegerField(verbose_name='总课时')),
                ('homepage', models.URLField(null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Instructor',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('homepage', models.URLField()),
            ],
        ),
        migrations.CreateModel(
            name='Semester',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('year', models.SmallIntegerField(verbose_name='学年（9月-次年7月）')),
                ('season', models.SmallIntegerField(choices=[(1, 'Fall'), (2, 'Spring'), (3, 'Summer')])),
            ],
            options={
                'unique_together': {('year', 'season')},
            },
        ),
        migrations.CreateModel(
            name='Thread',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('TAName', models.CharField(max_length=50, null=True)),
                ('content', jsonfield.fields.JSONField()),
                ('courseRating', models.SmallIntegerField()),
                ('courseDifficulty', models.SmallIntegerField(choices=[(1, 'easy'), (2, 'medium'), (3, 'hard')])),
                ('courseWorkload', models.SmallIntegerField(choices=[(1, 'light'), (2, 'medium'), (3, 'heavy')])),
                ('courseGrading', models.SmallIntegerField(choices=[(1, 'friendly'), (2, 'medium'), (3, 'strict')])),
                ('courseGain', models.SmallIntegerField(choices=[(1, 'lot'), (2, 'medium'), (3, 'little')])),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mock.Course')),
                ('semester', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mock.Semester')),
            ],
        ),
        migrations.CreateModel(
            name='Vote',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('score', models.SmallIntegerField(choices=[(1, 'like'), (0, 'canceled'), (-1, 'dislike')], default=0)),
                ('thread', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mock.Thread')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Subscription',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('level', models.SmallIntegerField(choices=[(1, 'Notify'), (2, 'Admin'), (3, 'Staff'), (4, 'Teacher')], default=1)),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mock.Course')),
                ('subscriber', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='InstructorNote',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField(null=True)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mock.Course')),
            ],
        ),
        migrations.AddField(
            model_name='course',
            name='instructorNotes',
            field=models.ManyToManyField(related_name='notes', through='mock.InstructorNote', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='course',
            name='instructors',
            field=models.ManyToManyField(to='mock.Instructor'),
        ),
        migrations.AddField(
            model_name='course',
            name='semesters',
            field=models.ManyToManyField(to='mock.Semester'),
        ),
        migrations.AddField(
            model_name='course',
            name='subscribers',
            field=models.ManyToManyField(through='mock.Subscription', to=settings.AUTH_USER_MODEL),
        ),
    ]
